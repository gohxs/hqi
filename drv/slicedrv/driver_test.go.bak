package slice

import (
	"fmt"
	"hexasoftware/x/gocql"
)

// TestData
type Device struct {
	Brand string `json:",omitempty"`
	Model string `json:",omitempty"`
}

var (
	DeviceData = []Device{
		Device{"Apple", "IPhone 5"},
		Device{"Samsung", "Note 5"},
		Device{"Apple", "IPhone 4"},
		Device{"HTC", "One"},
	}
	q = gocql.NewQuery(&Driver{DeviceData})
)

func ExampleFilter1() {
	var res []Device
	q.Find(gocql.M{"Brand": "Apple"}).
		List(&res)
	fmt.Println(res)
	// Output:
	// [{Apple IPhone 5} {Apple IPhone 4}]
}
func ExampleFilter2() {
	var res []Device
	q.Find(Device{Brand: "Samsung"}).
		List(&res)
	fmt.Println(res)
	// Output:
	// [{Samsung Note 5}]
}

func ExampleOrCond() {
	var res []Device
	q.Find(Device{Brand: "Samsung"}, Device{Brand: "HTC"}).
		List(&res)
	fmt.Println(res)
	// Output:
	// [{Samsung Note 5} {HTC One}]
}

func ExampleSortAsc() {
	var res []Device
	q.Find().
		SortAsc("Brand").
		List(&res)

	fmt.Println(res)
	// Output:
	// [{Apple IPhone 5} {Apple IPhone 4} {HTC One} {Samsung Note 5}]
}
func ExampleSortDesc() {
	var res []Device
	q.Find().
		SortDesc("Brand").
		List(&res)

	fmt.Println(res)
	// Output:
	// [{Samsung Note 5} {HTC One} {Apple IPhone 5} {Apple IPhone 4}]
}

func ExampleSortMultiple() {
	var res []Device
	q.Find().
		SortAsc("Brand", "Model").
		List(&res)

	fmt.Println(res)
	// Output:
	// [{Apple IPhone 4} {Apple IPhone 5} {HTC One} {Samsung Note 5}]

}
func ExampleMax() {
	var res []Device
	q.Find().
		SortDesc("Brand").
		Max(1).
		List(&res)

	fmt.Println(res)
	// Output:
	// [{Samsung Note 5}]
}
func ExampleSkip() {
	var res []Device
	q.Find().
		SortDesc("Brand").
		Skip(2).
		List(&res)

	fmt.Println(res)
	// Output:
	// [{Apple IPhone 5} {Apple IPhone 4}]
}
